on:
  workflow_call:
    secrets:
      PYPI_API_TOKEN:
        required: true
        description: >-
          The API token for the PyPI account that will be used to publish the
          package. This is a secret and should be stored in the repository's
          secrets.
    inputs:
      pypa-name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
        description: >-
          The name of the package on PyPI. This is the name that will be used to
          publish the package to PyPI. If the package name on PyPI is different
          from the repository name, you can specify it here.
      zipapp-entrypoint:
        required: false
        type: string
        default: null
        description: >-
          The entrypoint for the zipapp. If this is not specified, the zipapp
          will not be built. If this is specified, the zipapp will be built and
          uploaded as an artifact.
      zipapp-name:
        required: false
        type: string
        default: null
        description: >-
          The name of the zipapp. If this is not specified, it will default to
          the name of the {zipapp-entrypoint}.pyz if the entrypoint is specified.
      python-version:
        required: false
        type: string
        default: "3.8"
        description: >-
          The version of Python to use for building the package. This should be
          a string that is compatible with the `actions/setup-python` action.
      enable-pypi:
        required: false
        type: boolean
        default: true
        description: >-
          Whether to publish the package to PyPI. If this is set to `false`, the
          package will not be published to PyPI.
      os:
        required: false
        type: string
        default: ubuntu-latest
        description: >-
          The operating system to use for building the package. This should be a
          string that is compatible with the `runs-on` field in a job.
      env:
        required: false
        type: string
        default: '["3.8", "3.9", "3.10", "3.11", "3.12", "pypy3.9"]'
        description: >-
          The Python versions to use for testing the package. This should be a
          JSON array of strings that are compatible with the `python-version`
          field in the `actions/setup-python` action.
      arch:
        required: false
        type: string
        default: '["x64"]'
        description: >-
          The architectures to use for testing the package. This should be a
          JSON array of strings that are compatible with the `architecture` field
          in the `actions/setup-python` action.

env:
  ZIPAPP_NAME: ${{ inputs.zipapp-name || ( inputs.zipapp-entrypoint && format('{0}{1}', inputs.zipapp-entrypoint, '.pyz') || '') }}

jobs:
  hatch-test:
    name: ${{ inputs.os }} / ${{ matrix.env }}${{ inputs.arch != '["x64"]' && format(' /  {0}', matrix.arch) || '' }}
    runs-on: ${{ inputs.os }}
    strategy:
      matrix:
        env: ${{ fromJSON(inputs.env) }}
        arch: ${{ fromJSON(inputs.arch) }}
    steps:
      - uses: asottile/workflows/.github/actions/fast-checkout@v1.6.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.env }}
          architecture: ${{ matrix.arch }}
      - uses: ./.github/actions/pre-test
        if: ${{ hashFiles('.github/actions/pre-test/action.yml') != '' }}
      - run: python -mpip install --upgrade hatch pip
      - run: hatch run test

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          shiv
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Build a zipapp
        if: ${{ inputs.zipapp-entrypoint != null }}
        run: >-
          python3 -m
          shiv
          -o ${{ env.ZIPAPP_NAME }}
          -c ${{ inputs.zipapp-entrypoint }}
          .
      - name: Check zipapp
        if: ${{ inputs.zipapp-entrypoint != null }}
        run: python3 ./${{ env.ZIPAPP_NAME }} --help
      - uses: actions/upload-artifact@v4
        if: ${{ inputs.zipapp-entrypoint != null }}
        with:
          name: ${{ env.ZIPAPP_NAME }}
          path: ${{ env.ZIPAPP_NAME }}
          retention-days: 3

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: ${{ inputs.enable-pypi && startsWith(github.ref, 'refs/tags/') }} # only publish to PyPI on tag pushes
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ inputs.pypa-name }}
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    if: ${{ startsWith(github.ref, 'refs/tags/') }} # only publish to GitHub Releases on tag pushes
    needs:
      - build
    runs-on: ubuntu-latest

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - uses: actions/download-artifact@v4
        if: ${{ inputs.zipapp-entrypoint != null }}
        with:
          name: ${{ env.ZIPAPP_NAME }}
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
            ${{ env.ZIPAPP_NAME }}
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/** ${{ env.ZIPAPP_NAME }}
          --repo '${{ github.repository }}'
